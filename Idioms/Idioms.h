#pragma once

void address_of();								// 1
void algebraic_hierarchy();						// 2
void attach_by_initialization();				// 3
void attorney_client();							// 4
void barton_nackman_trick();					// 5
void base_from_member();						// 6
void boost_mutant();							// 7
void calling_virtual_during_initialization();	// 8
void capability_query();						// 9
void checked_delete();							// 10
void clear_and_minimize();						// 11
void coercion_by_member_template();				// 12
void coercion_by_member_template2();			// 12
void computational_constructor();				// 13
void concrete_data_type();						// 14
void construct_on_first_use();					// 15
void construction_tracker();					// 16
void copy_and_swap();							// 17
void copy_on_write();							// 18
void counted_body__reference_counting();		// 19
void covariant_return_types();					// 20
void curiously_recurring_template_pattern();	// 21
void empty_base_optimization();					// 22
void enable_if();								// 23
void erase_remove();							// 24
void execute_around_pointer();					// 25
void exploding_return_type();					// 26
void export_guard_macro();						// 27
void expression_template();						// 28
void fake_vtable();								// 29
void fast_pimpl();								// 30
void final_class();								// 31
void free_function_allocators();				// 32
void function_object();							// 33
void generic_container_idioms();				// 34
void hierarchy_generation();					// 35
void implicit_conversions();					// 36
#include "include_guard _macro.h"				// 37
#include "inline_guard_macro.h"					// 38
void inner_class();								// 39
void int_to_type();								// 40
void interface_class();							// 41
void iterator_pair();							// 42
void making_new_friends();						// 43
void metafunction();							// 44
void move_constructor();						// 45
void multi_statement_macro();					// 46
void member_detector();							// 47
void named_constructor();						// 48
void named_external_argument();					// 49
void named_loop();								// 50
void named_parameter();							// 51
void named_template_parameters();				// 52
void nifty_counter();							// 53
void non_copyable_mixin();						// 54
void non_member_non_friend_function();			// 55
void non_throwing_swap();						// 56

void SFINAE();									// N+1
